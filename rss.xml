<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="https://compiledconversations.com/rss.xsl"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:podcast="https://podcastindex.org/namespace/1.0"><channel><atom:link rel="self" type="application/atom+xml" href="https://compiledconversations.com/rss.xml" title="MP3 Audio"/><atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/><title>Compiled Conversations</title><description>In-depth conversations with the people shaping software and technology. Each episode explores real-world experiences, technical challenges, and the thinking behind the tools, systems, and decisions that drive modern development. From engineering practices to architectural choices, this is a show for developers who care about how software is built - and who's building it.</description><copyright>Â© 2025 Edd Mann</copyright><podcast:guid>https://compiledconversations.com/</podcast:guid><podcast:locked owner="edward.mann@gmail.com">no</podcast:locked><language>en</language><pubDate>Wed, 03 Sep 2025 06:00:00 +0000</pubDate><lastBuildDate>Wed, 10 Sep 2025 10:13:12 +0000</lastBuildDate><link>https://compiledconversations.com/</link><image><url>https://compiledconversations.com/album-art.jpg</url><title>Compiled Conversations</title><link>https://compiledconversations.com/</link></image><itunes:category text="Technology"/><itunes:type>episodic</itunes:type><itunes:author>Edd Mann</itunes:author><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>In-depth conversations with the people shaping software and technology. Each episode explores real-world experiences, technical challenges, and the thinking behind the tools, systems, and decisions that drive modern development. From engineering practices to architectural choices, this is a show for developers who care about how software is built - and who's building it.</itunes:summary><itunes:subtitle>Conversations with the people shaping software and technology.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:owner><itunes:name>Edd Mann</itunes:name><itunes:email>edward.mann@gmail.com</itunes:email></itunes:owner><itunes:complete>No</itunes:complete><itunes:explicit>false</itunes:explicit><item><title>All Aboard the PostgreSQL Train with Bruce Momjian</title><itunes:episode>6</itunes:episode><podcast:episode>6</podcast:episode><itunes:title>All Aboard the PostgreSQL Train with Bruce Momjian</itunes:title><itunes:episodeType>full</itunes:episodeType><guid isPermaLink="false">https://compiledconversations.com/6/</guid><link>https://compiledconversations.com/6/</link><description>Bruce Momjian traces Postgres&amp;#39;s 39-year journey from Berkeley to today, why extensibility (PostGIS, JSON, pgvector) became its superpower, and how the community sustains momentum. We cover TDE trade-offs in core, scaling and storage realities, and decoupled storage/compute in the cloud (Aurora, Neon) - plus what it means to stay &amp;#39;on the train&amp;#39;.</description><content:encoded><![CDATA[<p>Bruce Momjian joins us to explore why PostgreSQL continues to outpace proprietary databases - not just in features, but also in its development model and architecture.</p>
<p>We trace Postgres&rsquo;s 39-year lineage - from its Berkeley origins and Michael Stonebraker&rsquo;s vision for extensibility, through early debates about removing that extensibility, to the decades in which that design proved pivotal.
That architecture has paid off repeatedly, enabling JSON/JSONB, full-text search, PostGIS, and pgvector to land at the right moments without upheaval.
Bruce explains why transparent data encryption (TDE) hasn&rsquo;t landed in core, when sharding actually helps versus scaling up, and how storage choices (latency, power-loss protection) shape performance; we also look at async I/O in Postgres 18, extension-friendly interfaces like table access methods, and what it means to stay &lsquo;on the train&rsquo; within the community.</p>
<p>Topics include:</p>
<ul>
<li>39-year history: Berkeley origins, Stonebraker&rsquo;s vision for extensibility, and community longevity</li>
<li>The four motivations for open source contributors: puzzles, giving back, career growth, and need</li>
<li>Postgres&rsquo;s extensibility: from an early burden to a superpower (PostGIS, full-text search, JSON/JSONB, pgvector)</li>
<li>Why TDE is hard in core: technical value versus code complexity</li>
<li>Scaling and storage: latency, power-loss protection, and async I/O in Postgres 18</li>
<li>Aurora/Neon and decoupled storage/compute: niche wins versus staying on the community &rsquo;train&rsquo;</li>
</ul>
<p>Bruce also shares his approach to lifelong learning, why foundational skills compound, and how the Postgres community keeps engineers at the forefront - sustaining momentum across decades.</p>
<p><strong>Show Links</strong></p>
<p>Bruce generously shared links to all the presentations (with direct references to the discussed slides) and blog articles mentioned in the episode. You&rsquo;ll find them below:</p>
<ul>
<li>

<a href="https://momjian.us/" target="_blank">Bruce Momjian&rsquo;s Website</a>
</li>
<li>

<a href="https://postgis.net/" target="_blank">PostGIS</a>
</li>
<li>

<a href="https://github.com/pgvector/pgvector" target="_blank">pgvector</a>
</li>
<li>

<a href="https://www.postgresql.org/docs/current/datatype-json.html" target="_blank">PostgreSQL JSON Types</a>
</li>
<li>

<a href="https://www.citusdata.com/" target="_blank">Citus</a>
</li>
<li>

<a href="https://www.enterprisedb.com/" target="_blank">EDB (EnterpriseDB)</a>
</li>
<li>

<a href="https://aws.amazon.com/rds/aurora/" target="_blank">Amazon Aurora</a>
</li>
<li>

<a href="https://neon.com/" target="_blank">Neon Serverless Postgres</a>
</li>
<li>

<a href="https://www.postgresql.org/about/news/postgresql-18-beta-1-released-3070/" target="_blank">Async I/O in Postgres 18</a>
</li>
<li>

<a href="https://momjian.us/main/presentations/selecting.html" target="_blank">Bruce&rsquo;s Blog: Selecting Presentations</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/three.pdf#page=17" target="_blank">Presentation: Three Key Attributes of Postgres (2006 Conference)</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/pg_open_source.pdf#page=21" target="_blank">Presentation: The PostgreSQL Open Source Development Process (Our Developers)</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/forever.pdf#page=10" target="_blank">Presentation: Will Postgres Live Forever? (Proprietary Development Flow)</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/forever.pdf#page=15" target="_blank">Presentation: Will Postgres Live Forever? (Many Focuses)</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/trajectory.pdf#page=12" target="_blank">Presentation: The Postgres Trajectory (PostgreSQL Evolution)</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/trajectory.pdf#page=13" target="_blank">Presentation: The Postgres Trajectory (Today&rsquo;s Data Source)</a>
</li>
<li>

<a href="https://wiki.postgresql.org/wiki/Transparent_Data_Encryption" target="_blank">Postgres Wiki: Transparent Data Encryption</a>
</li>
<li>

<a href="https://momjian.us/main/blogs/pgblog/2025.html#February_22_2025" target="_blank">Bruce&rsquo;s Blog: Wish I Was Wrong About TDE</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/yesql.pdf" target="_blank">Presentation: Battling the NoSQL Hype Cycle with Postgres</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/sharding.pdf" target="_blank">Presentation: The Future of Postgres Sharding</a>
</li>
<li>

<a href="https://momjian.us/main/blogs/pgblog/2023.html#November_1_2023" target="_blank">Bruce&rsquo;s Blog: Sharding Status</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/hw_selection.pdf" target="_blank">Presentation: Database Hardware Selection Guideline</a>
</li>
<li>

<a href="https://momjian.us/main/blogs/pgblog/2023.html#October_23_2023" target="_blank">Bruce&rsquo;s Blog: Power-Loss Protection</a>
</li>
<li>

<a href="https://momjian.us/main/writings/pgsql/challenges.pdf#page=6" target="_blank">Presentation: Future Postgres Challenges (Strong Diversified Assistance)</a>
</li>
</ul>
]]></content:encoded><pubDate>Wed, 03 Sep 2025 06:00:00 +0000</pubDate><author>Edd Mann</author><enclosure url="https://podcasts.compiledconversations.com/006-all-aboard-the-postgresql-train-with-bruce-momjian.mp3" length="81686016" type="audio/mpeg"/><itunes:author>Edd Mann</itunes:author><itunes:duration>5095</itunes:duration><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>Bruce Momjian traces Postgres&amp;#39;s 39-year journey from Berkeley to today, why extensibility (PostGIS, JSON, pgvector) became its superpower, and how the community sustains momentum. We cover TDE trade-offs in core, scaling and storage realities, and decoupled storage/compute in the cloud (Aurora, Neon) - plus what it means to stay &amp;#39;on the train&amp;#39;.</itunes:summary><itunes:subtitle>39 years of Postgres: extensibility, community motivations, TDE, decoupled storage/compute in the cloud - and staying 'on the train'.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:explicit>false</itunes:explicit></item><item><title>Learning Domain-Driven Design, Part 2 with Vlad Khononov</title><itunes:episode>5</itunes:episode><podcast:episode>5</podcast:episode><itunes:title>Learning Domain-Driven Design, Part 2 with Vlad Khononov</itunes:title><itunes:episodeType>full</itunes:episodeType><guid isPermaLink="false">https://compiledconversations.com/5/</guid><link>https://compiledconversations.com/5/</link><description>In Part 2, Vlad Khononov applies DDD in practice - covering context-mapping patterns, EventStorming, fit-for-purpose architecture, testing, team ownership, pragmatic adoption, plus AI&amp;#39;s impact on modeling.</description><content:encoded><![CDATA[<p>In Part 2 of our deep dive into Domain-Driven Design (DDD), Vlad Khononov returns to explore how to apply DDD in the real world.</p>
<p>We move beyond the foundations and into implementation - from context mapping and EventStorming to fit-for-purpose architecture, testing, team design, ownership, pragmatic adoption, and AI&rsquo;s impact on modeling.</p>
<p>Topics include:</p>
<ul>
<li>CQRS in practice</li>
<li>Bounded contexts and subdomains: boundaries, granularity, and trade-offs</li>
<li>Context mapping patterns: conformist, ACL, open-host, partnership, separate ways</li>
<li>EventStorming vs Domain Storytelling</li>
<li>Architecture patterns: Layered, Hexagonal (Ports &amp; Adapters)</li>
<li>Implementation choices: Transaction Script, Active Record, Domain Model, Event-Sourced Domain Model</li>
<li>Tailoring testing strategies to fit your chosen implementation pattern</li>
<li>Teams and adoption: ownership, safe duplication, where to start, and AI&rsquo;s role</li>
</ul>
<p>We wrap with how to adopt DDD without overwhelming your team - focusing on shared understanding, clear ownership, and picking the simplest tools that fit your domain today while keeping tomorrow flexible.</p>
<p><em>This is Part 2 of a 2-part series. In 

<a href="/4">Part 1</a>
, we covered the foundations: what DDD is for, subdomains and their types, ubiquitous language, bounded contexts, and making flexible architecture decisions.</em></p>
<p><strong>Show Links</strong></p>
<ul>
<li>

<a href="https://vladikk.com/" target="_blank">Vlad Khononov&rsquo;s Website</a>
</li>
<li>

<a href="https://x.com/vladikk" target="_blank">Vlad Khononov on X/Twitter</a>
</li>
<li>

<a href="https://bsky.app/profile/vladikk.bsky.social" target="_blank">Vlad Khononov on Bluesky</a>
</li>
<li>

<a href="https://www.linkedin.com/in/vladikk/" target="_blank">Vlad Khononov on LinkedIn</a>
</li>
<li>

<a href="https://www.oreilly.com/library/view/learning-domain-driven-design/9781098100124/" target="_blank">Vlad Khononov - Learning Domain-Driven Design</a>
</li>
<li>

<a href="https://coupling.dev/" target="_blank">Vlad Khononov - Balancing Coupling in Software Design</a>
</li>
<li>

<a href="https://www.eventstorming.com/" target="_blank">EventStorming</a>
</li>
<li>

<a href="https://domainstorytelling.org/" target="_blank">Domain Storytelling</a>
</li>
<li>

<a href="https://vladikk.com/2025/04/05/f1-ddd/" target="_blank">F1 + DDD: All Models are Wrong, Some are Dangerous</a>
</li>
<li>

<a href="https://alistair.cockburn.us/hexagonal-architecture/" target="_blank">Hexagonal Architecture / Ports and Adapters</a>
</li>
<li>

<a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs" target="_blank">CQRS</a>
</li>
<li>

<a href="https://teamtopologies.com/" target="_blank">Team Topologies</a>
</li>
</ul>
]]></content:encoded><pubDate>Wed, 27 Aug 2025 17:00:00 +0000</pubDate><author>Edd Mann</author><enclosure url="https://podcasts.compiledconversations.com/005-learning-domain-driven-design-part-2-with-vlad-khononov.mp3" length="47352489" type="audio/mpeg"/><itunes:author>Edd Mann</itunes:author><itunes:duration>2950</itunes:duration><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>In Part 2, Vlad Khononov applies DDD in practice - covering context-mapping patterns, EventStorming, fit-for-purpose architecture, testing, team ownership, pragmatic adoption, plus AI&amp;#39;s impact on modeling.</itunes:summary><itunes:subtitle>DDD in practice: context mapping, modeling workshops, architecture, testing, team design, pragmatic adoption - plus AI's impact on modeling.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:explicit>false</itunes:explicit></item><item><title>Learning Domain-Driven Design, Part 1 with Vlad Khononov</title><itunes:episode>4</itunes:episode><podcast:episode>4</podcast:episode><itunes:title>Learning Domain-Driven Design, Part 1 with Vlad Khononov</itunes:title><itunes:episodeType>full</itunes:episodeType><guid isPermaLink="false">https://compiledconversations.com/4/</guid><link>https://compiledconversations.com/4/</link><description>Author and trainer Vlad Khononov joins us for Part 1 of a deep dive into Domain-Driven Design (DDD). We cover what DDD is really for, why strategic DDD matters more than patterns, how to identify subdomains, the relationship between subdomains and bounded contexts, and how to make pragmatic architecture choices that align with your business.</description><content:encoded><![CDATA[<p>Vlad Khononov, author of Learning Domain-Driven Design, joins us to demystify DDD - focusing on the business first, and the code second.</p>
<p>We unpack what DDD is really trying to help you achieve, why strategic DDD matters most, and how concepts like subdomains, ubiquitous language, and bounded contexts can guide both architecture and team design.
Along the way, Vlad shares pragmatic advice for avoiding common misconceptions and making choices that keep you flexible as both your product and understanding evolve.</p>
<p>Topics include:</p>
<ul>
<li>What DDD is - and the real problem it solves for teams</li>
<li>Strategic vs. tactical DDD (why strategy comes first)</li>
<li>The developer&rsquo;s role in uncovering business intent and future change</li>
<li>Subdomains: core vs. supporting vs. generic - and why granularity is hard</li>
<li>Ubiquitous language: speaking the business&rsquo;s language (and making it stick)</li>
<li>Bounded contexts: protecting model integrity and when to widen the scope</li>
<li>One-to-one myths: why subdomains â  bounded contexts</li>
<li>Monoliths, modular monoliths, and microservices - choosing for flexibility</li>
<li>Ownership boundaries and deploying multiple artifacts atomically</li>
<li>Integrations and the anti-corruption layer (keeping external models out)</li>
<li>Using the Cynefin framework to reason about core/complicated/supporting work</li>
</ul>
<p>Vlad also shares hard-won lessons on communicating with domain experts, dealing with uncertainty in core subdomains, and why wider bounded contexts can make early-stage change safer and cheaper.</p>
<p>This episode is packed with practical guidance for anyone trying to align architecture with real business needs - not just patterns.</p>
<p><em>This is Part 1 of 2. In 

<a href="/5">Part 2</a>
 we cover: context mapping, modeling workshops, fit-for-purpose architecture and testing, team boundaries, pragmatic adoption, and AI&rsquo;s impact on modeling.</em></p>
<p><strong>Show Links</strong></p>
<ul>
<li>

<a href="https://vladikk.com/" target="_blank">Vlad Khononov&rsquo;s Website</a>
</li>
<li>

<a href="https://x.com/vladikk" target="_blank">Vlad Khononov on X/Twitter</a>
</li>
<li>

<a href="https://bsky.app/profile/vladikk.bsky.social" target="_blank">Vlad Khononov on Bluesky</a>
</li>
<li>

<a href="https://www.linkedin.com/in/vladikk/" target="_blank">Vlad Khononov on LinkedIn</a>
</li>
<li>

<a href="https://www.oreilly.com/library/view/learning-domain-driven-design/9781098100124/" target="_blank">Vlad Khononov - Learning Domain-Driven Design</a>
</li>
<li>

<a href="https://coupling.dev/" target="_blank">Vlad Khononov - Balancing Coupling in Software Design</a>
</li>
<li>

<a href="https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/" target="_blank">Eric Evans - Domain-Driven Design (Blue Book)</a>
</li>
<li>

<a href="https://www.oreilly.com/library/view/implementing-domain-driven-design/9780133039900/" target="_blank">Vaughn Vernon - Implementing Domain-Driven Design (Red Book)</a>
</li>
<li>

<a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/" target="_blank">Scott Wlaschin - Domain Modeling Made Functional (White Book)</a>
</li>
<li>

<a href="https://www.eventstorming.com/" target="_blank">EventStorming</a>
</li>
<li>

<a href="https://en.wikipedia.org/wiki/Cynefin_framework" target="_blank">Cynefin framework</a>
</li>
<li>

<a href="https://vladikk.com/2025/05/26/with-ai-everything-is-complicated/" target="_blank">With AI, everything is so complicated&hellip; and this is great news!</a>
</li>
</ul>
]]></content:encoded><pubDate>Wed, 20 Aug 2025 07:00:00 +0000</pubDate><author>Edd Mann</author><enclosure url="https://podcasts.compiledconversations.com/004-learning-domain-driven-design-part-1-with-vlad-khononov.mp3" length="59659573" type="audio/mpeg"/><itunes:author>Edd Mann</itunes:author><itunes:duration>3719</itunes:duration><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>Author and trainer Vlad Khononov joins us for Part 1 of a deep dive into Domain-Driven Design (DDD). We cover what DDD is really for, why strategic DDD matters more than patterns, how to identify subdomains, the relationship between subdomains and bounded contexts, and how to make pragmatic architecture choices that align with your business.</itunes:summary><itunes:subtitle>Understanding domains, subdomains, ubiquitous language, and bounded contexts - plus how to apply strategic vs. tactical DDD in the real world.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:explicit>false</itunes:explicit></item><item><title>Serverless PHP with Matthieu Napoli</title><itunes:episode>3</itunes:episode><podcast:episode>3</podcast:episode><itunes:title>Serverless PHP with Matthieu Napoli</itunes:title><itunes:episodeType>full</itunes:episodeType><guid isPermaLink="false">https://compiledconversations.com/3/</guid><link>https://compiledconversations.com/3/</link><description>Matthieu Napoli, creator of Bref, shares how PHP found its place in serverless through AWS Lambda - and what it takes to run modern applications without managing infrastructure. We cover Bref&amp;#39;s architecture, Laravel/Symfony support, Bref Cloud, and trade-offs with containers and Kubernetes.</description><content:encoded><![CDATA[<p>Matthieu Napoli, creator of Bref, joins us to explore the journey of bringing PHP to AWS Lambda - and making serverless a reality for everyday PHP developers.
From hacking runtimes to building a mature ecosystem, Matthieu unpacks what &ldquo;serverless&rdquo; really means in practice - beyond the hype.</p>
<p>We dig into Bref&rsquo;s architecture, its integration with Laravel and Symfony, why PHP fits so naturally into Lambda&rsquo;s execution model, and what it takes to run scalable, queue-driven applications without managing infrastructure.
Matthieu also shares the story behind Bref Cloud - a new deployment and monitoring platform built to simplify the AWS experience for teams of all sizes, while staying open, secure, and extensible.</p>
<p>Along the way, we dive into the trade-offs between serverless and Kubernetes, the importance of developer experience in platform design, and how Bref stays flexible - whether you&rsquo;re shipping a side project or scaling production workloads.</p>
<p>This conversation is packed with practical insight into the past, present, and future of serverless PHP - from cold starts and containers to deployment patterns, open source sustainability, and what it takes to keep PHP evolving in the cloud era.</p>
<p><strong>Show Links</strong></p>
<ul>
<li>

<a href="https://bref.sh/" target="_blank">Bref (Official Site)</a>
</li>
<li>

<a href="https://bref.sh/cloud" target="_blank">Bref Cloud</a>
</li>
<li>

<a href="https://mnapoli.fr/" target="_blank">Matthieu Napoli&rsquo;s Website</a>
</li>
<li>

<a href="https://x.com/matthieunapoli" target="_blank">Matthieu Napoli on X/Twitter</a>
</li>
<li>

<a href="https://bsky.app/profile/mnapoli.bsky.social" target="_blank">Matthieu Napoli on Bluesky</a>
</li>
<li>

<a href="https://github.com/brefphp/bref" target="_blank">Bref GitHub Repo</a>
</li>
<li>

<a href="https://www.youtube.com/watch?v=r8fgR0lTV-k" target="_blank">Serverless PHP: how does it really work?</a>
</li>
<li>

<a href="https://bref.sh/docs/cloud-security" target="_blank">Bref Cloud Security &amp; IAM Docs</a>
</li>
<li>

<a href="https://vapor.laravel.com/" target="_blank">Laravel Vapor (for comparison)</a>
</li>
<li>

<a href="https://aws.amazon.com/lambda/" target="_blank">AWS Lambda</a>
</li>
<li>

<a href="https://symfony.com/" target="_blank">Symfony</a>
</li>
<li>

<a href="https://laravel.com/" target="_blank">Laravel</a>
</li>
<li>

<a href="https://www.serverless.com/" target="_blank">Serverless Framework</a>
</li>
<li>

<a href="https://github.com/getlift/lift" target="_blank">Lift Plugin for Serverless Framework</a>
</li>
</ul>
]]></content:encoded><pubDate>Wed, 06 Aug 2025 14:00:00 +0000</pubDate><author>Edd Mann</author><enclosure url="https://podcasts.compiledconversations.com/003-serverless-php-with-matthieu-napoli.mp3" length="63957719" type="audio/mpeg"/><itunes:author>Edd Mann</itunes:author><itunes:duration>3987</itunes:duration><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>Matthieu Napoli, creator of Bref, shares how PHP found its place in serverless through AWS Lambda - and what it takes to run modern applications without managing infrastructure. We cover Bref&amp;#39;s architecture, Laravel/Symfony support, Bref Cloud, and trade-offs with containers and Kubernetes.</itunes:summary><itunes:subtitle>Running PHP on AWS Lambda with Bref, simplifying deployments with Bref Cloud, and rethinking infrastructure for modern applications.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:explicit>false</itunes:explicit></item><item><title>Thinking in Events: Principles of Event-Driven Architecture, Part 2 with James Eastham</title><itunes:episode>2</itunes:episode><podcast:episode>2</podcast:episode><itunes:title>Thinking in Events: Principles of Event-Driven Architecture, Part 2 with James Eastham</itunes:title><itunes:episodeType>full</itunes:episodeType><guid isPermaLink="false">https://compiledconversations.com/2/</guid><link>https://compiledconversations.com/2/</link><description>In Part 2, James Eastham returns to tackle the practical side of event-driven architecture - covering failure recovery, orchestration vs. choreography, testing strategies, handling sensitive data, and how to migrate from a monolith using real-world patterns.</description><content:encoded><![CDATA[<p>In Part 2 of our deep dive into event-driven architecture (EDA), James Eastham returns to explore the practical realities of building and maintaining event-driven systems.
We go beyond principles and into implementation - from failure handling and orchestration vs. choreography, to observability, testing, security, and real-world migration strategies.</p>
<p>Topics include:</p>
<ul>
<li>Choreography vs. orchestration: coordination strategies and trade-offs</li>
<li>Failure recovery and the saga pattern</li>
<li>Handling sensitive data in events (PII, encryption, audit)</li>
<li>Observability and distributed tracing with OpenTelemetry</li>
<li>Event versioning, schema evolution, and contract testing</li>
<li>Simple async frontend integration: polling vs. WebSockets</li>
<li>Migrating from a monolith using internal events and change data capture (CDC)</li>
<li>Testing flow vs. structure in EDA systems</li>
<li>The realities of documentation and schema visibility</li>
<li>How to get started with EDA - and why you donât need microservices to do it</li>
</ul>
<p>We wrap up with a candid look at how James learns best - by doing and by teaching - and why that matters in the fast-evolving world of distributed systems.</p>
<p><em>This is Part 2 of a 2-part series. In Part 1, we discussed the foundational principles of event-driven architecture - including types of coupling, asynchronous communication, event design, and the role of events in decoupling and scaling distributed systems.</em></p>
<p><strong>Show Links</strong></p>
<ul>
<li>

<a href="https://jameseastham.co.uk/" target="_blank">James Eastham&rsquo;s Website</a>
</li>
<li>

<a href="https://www.youtube.com/@serverlessjames" target="_blank">James Eastham on YouTube</a>
</li>
<li>

<a href="https://bsky.app/profile/jameseastham.co.uk" target="_blank">James Eastham on Bluesky</a>
</li>
<li>

<a href="https://cloudevents.io" target="_blank">CloudEvents Spec</a>
</li>
<li>

<a href="https://opentelemetry.io" target="_blank">OpenTelemetry</a>
</li>
<li>

<a href="https://www.youtube.com/watch?v=Jfwriqqkwi4" target="_blank">Laila Bougria - Orchestration vs. Choreography</a>
</li>
<li>

<a href="https://www.youtube.com/watch?v=DgW1kAazN80" target="_blank">Martin Thwaites &amp; Ian Cooper - Modern Observability and Event Driven Architectures</a>
</li>
<li>

<a href="https://github.com/jeastham1993/PlantBasedPizza" target="_blank">James&rsquo; Pizza Restaurant Example App</a>
</li>
<li>

<a href="https://github.com/jeastham1993/event-test-harness" target="_blank">James&rsquo; Event Test Harness</a>
</li>
</ul>
]]></content:encoded><pubDate>Wed, 30 Jul 2025 07:00:00 +0000</pubDate><author>Edd Mann</author><enclosure url="https://podcasts.compiledconversations.com/002-thinking-in-events-principles-of-event-driven-architecture-part-2-with-james-eastham.mp3" length="44311584" type="audio/mpeg"/><itunes:author>Edd Mann</itunes:author><itunes:duration>2760</itunes:duration><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>In Part 2, James Eastham returns to tackle the practical side of event-driven architecture - covering failure recovery, orchestration vs. choreography, testing strategies, handling sensitive data, and how to migrate from a monolith using real-world patterns.</itunes:summary><itunes:subtitle>Handling failure, choreography vs. orchestration, testing, observability, and practical migration strategies in event-driven systems.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:explicit>false</itunes:explicit></item><item><title>Thinking in Events: Principles of Event-Driven Architecture, Part 1 with James Eastham</title><itunes:episode>1</itunes:episode><podcast:episode>1</podcast:episode><itunes:title>Thinking in Events: Principles of Event-Driven Architecture, Part 1 with James Eastham</itunes:title><itunes:episodeType>full</itunes:episodeType><guid isPermaLink="false">https://compiledconversations.com/1/</guid><link>https://compiledconversations.com/1/</link><description>Developer advocate James Eastham joins us for Part 1 of a deep dive into the core principles of event-driven architecture (EDA), including types of coupling, asynchronous communication, event design, and real-world trade-offs in building distributed systems.</description><content:encoded><![CDATA[<p>We&rsquo;re joined by James Eastham, developer advocate at Datadog, to break down the fundamentals of event-driven architecture (EDA) - not just as a technical pattern, but as a communication-first mindset for building distributed systems.</p>
<p>We explore how communication lies at the heart of software design, why coupling and cohesion still matter in modern architectures, and what makes an event more than just a message. The discussion covers everything from monolith vs. microservices trade-offs to the practical realities of building asynchronous systems at scale.</p>
<p>Topics include:</p>
<ul>
<li>The difference between runtime, temporal, semantic, and data format coupling</li>
<li>What separates event-driven from event-based systems</li>
<li>Why the language of the business should shape your events</li>
<li>How to design and structure thin vs. thick events</li>
<li>Managing idempotency, delivery guarantees, and event versioning</li>
<li>Using CloudEvents, AsyncAPI, and standards to avoid chaos</li>
<li>The pros and cons of buses, streams, and queues - and when to use which</li>
</ul>
<p>James also shares insights from his time at AWS and Datadog, including a healthy dose of pizza metaphors to explain abstract concepts like consistency models and event flow.</p>
<p>Whether you&rsquo;re starting fresh or untangling an existing architecture, this episode offers clarity on how to think - and build - in events.</p>
<p><em>This is Part 1 of a 2-part series. In Part 2, we&rsquo;ll dive deeper into choreography vs. orchestration, failure handling, testing, observability, and real-world delivery patterns.</em></p>
<p><strong>Show Links</strong></p>
<ul>
<li>

<a href="https://jameseastham.co.uk/" target="_blank">James Eastham&rsquo;s Website</a>
</li>
<li>

<a href="https://www.youtube.com/@serverlessjames" target="_blank">James Eastham on YouTube</a>
</li>
<li>

<a href="https://bsky.app/profile/jameseastham.co.uk" target="_blank">James Eastham on Bluesky</a>
</li>
<li>

<a href="https://cloudevents.io" target="_blank">CloudEvents Spec</a>
</li>
<li>

<a href="https://www.asyncapi.com" target="_blank">AsyncAPI Specification</a>
</li>
<li>

<a href="https://www.eventcatalog.dev" target="_blank">Event Catalog by Dave Boyne</a>
</li>
<li>

<a href="https://samnewman.io/books/building_microservices/" target="_blank">Sam Newman - Building Microservices</a>
</li>
<li>

<a href="https://www.enterpriseintegrationpatterns.com" target="_blank">Enterprise Integration Patterns by Gregor Hohpe</a>
</li>
<li>

<a href="https://github.com/jeastham1993/PlantBasedPizza" target="_blank">James&rsquo; Pizza Restaurant Example App</a>
</li>
</ul>
]]></content:encoded><pubDate>Wed, 23 Jul 2025 08:00:00 +0000</pubDate><author>Edd Mann</author><enclosure url="https://podcasts.compiledconversations.com/001-thinking-in-events-principles-of-event-driven-architecture-part-1-with-james-eastham.mp3" length="54016596" type="audio/mpeg"/><itunes:author>Edd Mann</itunes:author><itunes:duration>3366</itunes:duration><itunes:image href="https://compiledconversations.com/album-art.jpg"/><itunes:summary>Developer advocate James Eastham joins us for Part 1 of a deep dive into the core principles of event-driven architecture (EDA), including types of coupling, asynchronous communication, event design, and real-world trade-offs in building distributed systems.</itunes:summary><itunes:subtitle>Exploring the core principles of event-driven architecture - communication, coupling, and async design.</itunes:subtitle><itunes:keywords>software development, technology, programming, engineering, developers</itunes:keywords><itunes:explicit>false</itunes:explicit></item></channel></rss>